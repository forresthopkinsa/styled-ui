webpackJsonp([41],{1554:function(t,e,n){var a=n(1),s=n(67),d=n(308).PageRenderer;d.__esModule&&(d=d.default);var o=s({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(1610)}},componentWillMount:function(){},render:function(){return a.createElement(d,Object.assign({},this.props,{content:this.state.content}))}});o.__catalog_loader__=!0,t.exports=o},1610:function(t,e){t.exports='```react\nnoSource: true\n---\n<React.Fragment>\n\t<V6Banner />\n\t<HelpBox variant="warning">This documentation page was broken by the update to v6. It will be fixed shortly.</HelpBox>\n</React.Fragment>\n```\n\n## Default Date Picker\n\n```react\nshowSource: true\nstate: { selectedDate: null }\n---\n<DatePickerDemo>\n<div>\n<span>The selected date is {dateFunctions.format(state.selectedDate, \'MM-dd-yyyy\')}</span>\n\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen: !state.isOpen })}>Select Date</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen} placement="bottom" styleOverrides={{ maxWidth: \'1000px\' }}>\n\t\t\t<DatePicker\n\t\t\t\tselectedDate={state.selectedDate}\n\t\t\t\tsetSelectedDate={(date) => setState({ selectedDate: date })}\n\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\tvalidate={() => true}\n\t\t\t/>\n\t\t</Popover>\n\t</PopoverManager>\n</div>\n</DatePickerDemo>\n```\n\n## With Min and Max Dates\n\n```react\nshowSource: true\nstate: { selectedDate: null }\n---\n<DatePickerDemo>\n<div>\n<span>The selected date is {dateFunctions.format(state.selectedDate, \'MM-dd-yyyy\')}</span>\n\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen: !state.isOpen })}>Select Date</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen} placement="bottom" styleOverrides={{ maxWidth: \'1000px\' }}>\n\t\t\t<DatePicker\n\t\t\t\tselectedDate={state.selectedDate}\n\t\t\t\tminDate={new Date(today.getTime()).setMonth(today.getMonth() - 2)}\n\t\t\t\tmaxDate={new Date(today.getTime()).setMonth(today.getMonth() + 2)}\n\t\t\t\tsetSelectedDate={(date) => setState({ selectedDate: date })}\n\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\tvalidate={() => true}\n\t\t\t/>\n\t\t</Popover>\n\t</PopoverManager>\n</div>\n</DatePickerDemo>\n```\n\n## Default Date Range Picker\n\n```react\nshowSource: true\nstate: { selectedDateRange: null }\n---\n<DatePickerDemo>\n<div>\n\t<span>The selected date range is {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.start, \'MM-dd-yyyy\') : null)} to {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.end, \'MM-dd-yyyy\') : null)}</span>\n\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen: !state.isOpen })}>Select Dates</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen} placement="bottom" styleOverrides={{ maxWidth: \'1000px\' }}>\n\t\t\t<DatePicker\n\t\t\t\tselectedDateRange={state.selectedDateRange}\n\t\t\t\tsetSelectedDate={(dateRange) => setState({ selectedDateRange: dateRange })}\n\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\tvalidate={() => true}\n\t\t\t\tasDateRangePicker\n\t\t\t/>\n\t\t</Popover>\n\t</PopoverManager>\n</div>\n</DatePickerDemo>\n```\n\n## Date Period Picker\n\n```react\nshowSource: true\nstate: { selectedDateRange: null, selectedDatePeriodIndex: null }\n---\n<DatePickerDemo>\n\t<div>The selected date range is {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.start, \'MM-dd-yyyy\') : null)} to {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.end, \'MM-dd-yyyy\') : null)}</div>\n\t<div>The selected date period index is <code>{state.selectedDatePeriodIndex === null ? "null" : state.selectedDatePeriodIndex}</code></div>\n\t<PopoverManager onFocusAway={() => setState({ isOpen: false })}>\n\t\t<PopoverReference>\n\t\t\t<Button variant="primary" size="medium" onClick={() => setState({ isOpen: !state.isOpen })} style={{ margin: "0.5rem 4rem" }}>Select Dates</Button>\n\t\t</PopoverReference>\n\t\t<Popover isOpen={state.isOpen} placement="bottom" styleOverrides={{ padding: \'0px\', maxWidth: \'1000px\' }}>\n\t\t\t<DatePeriodPicker\n\t\t\t\tselectedDateRange={state.selectedDateRange}\n\t\t\t\tsetSelectedDate={(dateRange, periodIndex) => {\n\t\t\t\t\tsetState({ selectedDateRange: dateRange, selectedDatePeriodIndex: periodIndex })\n\t\t\t\t}}\n\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\tvalidate={date => date >= new Date(1970, 0, 1)}\n\t\t\t\tparseDate={dateFunctions.parse}\n\t\t\t\tdatePeriods={[{\n\t\t\t\t\tdisplayName: \'Last 7 Days\',\n\t\t\t\t\tdateRange: { start: dateFunctions.addDays(new Date(), -7), end: new Date() }\n\t\t\t\t},{\n\t\t\t\t\tdisplayName: \'Last 30 Days\',\n\t\t\t\t\tdateRange: { start: dateFunctions.addDays(new Date(), -30), end: new Date() }\n\t\t\t\t},{\n\t\t\t\t\tdisplayName: \'Last 90 Days\',\n\t\t\t\t\tdateRange: { start: dateFunctions.addDays(new Date(), -90), end: new Date() }\n\t\t\t\t}]}\n\t\t\t/>\n\t\t</Popover>\n\t</PopoverManager>\n</DatePickerDemo>\n```\n'}});
//# sourceMappingURL=41.6723025c.chunk.js.map